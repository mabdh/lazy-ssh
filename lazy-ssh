#!/bin/bash
# kv-bash library https://github.com/damphat/kv-bash
source ./kv-bash 

_lazy_ssh_config_dir=~/.config/lazy-ssh
_lazy_ssh_project_dir=~/.lazy-ssh

function _lazy_ssh_usage() {
  cat <<EOF

USAGE:

lazy-ssh - Shell function to fuzzy search remote ssh address
            , connect to it automatically, and copy command to clipboard.

-s    - Set key value of remote name and its address, 'lazy-ssh -s MyRemote-1 192.168.0.1'.
-l    - List all key value remote name and its address.
-c    - Clear all kv pairs.
-u    - Get default username to connect to the remote.
-y    - Set default username to connect to the remote, 'lazy-ssh -y remote_user'.
-h    - Show this help.
EOF
}

function _lazy_ssh_get_totp() {
  secret_key=$1
  case $TOTP_MODE in
  oathtool)
    password=$(oathtool --totp --base32 $secret_key)
    return 0
    ;;
  yubikey)
    if ! [ -x "$(command -v ykman)" ]; then
      echo 'Error: ykman tool not installed.' >&2
      exit 1
    fi
    if [ -z "$LAZY_CONNECT_TOTP_QUERY" ]; then
      echo "Error: LAZY_CONNECT_TOTP_QUERY not set."
      exit 1
    else
      password=$(ykman oath code $LAZY_CONNECT_TOTP_QUERY 2>/dev/null | awk '{print $2}')
    fi
    ;;
  esac
}

function _lazy_ssh() {
  remotebox_name=$1
  # _lazy_ssh_get_totp $2
  local autofill=$2

  $(echo "ssh $(cat $_lazy_ssh_config_dir/username)@$(kvget $remotebox_name)" | pbcopy)
  $(ssh "$(cat $_lazy_ssh_config_dir/username)"@"$(kvget $remotebox_name)")

}

function _lazy_set(){
  key=$1
  value=$2
  kvset $key $value
}

function lazy-ssh() {
  local OPTIND
  local autofill="true"
  mkdir -p $_lazy_ssh_config_dir

  while getopts "shlcuy" opt; do
    case $opt in
    c)
      kvclear
      return 0
      ;;
    h)
      _lazy_ssh_usage
      return 0
      ;;
    s)
      _lazy_set $2 $3
      return 0
      ;;
    l)
      kvlist
      return 0
      ;;
    u)
      cat $_lazy_ssh_config_dir/username
      return 0
      ;;
    y)
      echo $2 > $_lazy_ssh_config_dir/username
      return 0
      ;;
    \?)
      echo "Invalid Option: -$OPTARG."
      _lazy_ssh_usage
      return 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      _lazy_ssh_usage
      return 1
      ;;
    esac
  done
  
  remotebox_name=$(kvkeys |
  fzf --height=10 --ansi --reverse --query "$*" --select-1)
  [ -z "$remotebox_name" ] || _lazy_ssh "$remotebox_name" "$autofill"
}

lazy-ssh "$@"
